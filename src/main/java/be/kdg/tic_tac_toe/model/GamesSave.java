package be.kdg.tic_tac_toe.model;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class GamesSave implements SaveFiles {
    private static final String template = """
            //\\\\GAME SAVE FILE//\\\\
            //\\\\DO NOT EDIT THIS FILE MANUALLY//\\\\
            //\\\\THIS FILE IS AUTOMATICALLY GENERATED//\\\\
            //\\\\REMOVING LINES WILL CAUSE ERRORS EVEN BLANK LINES//\\\\
            //\\\\ANY CHANGE CAN CAUSE CORRUPTION OF YOUR SAVE FILE//\\\\
            //\\\\WHEN YOU EDIT THIS FILE, MAKE SURE YOU HAVE A BACKUP AND ALWAYS LEAVE ONE LINE EMPTY AT THE BOTTOM OF THIS FILE//\\\\
            ========================================================================================================================""";

    private static final Path gamesSave = Paths.get("resources" + File.separator
            + "saveFiles" + File.separator
            + "games.txt");
    private List<String[]> gamesList;
    private Contribution contribution;
    private int gameNumber;
    private StringBuilder moves;

    public GamesSave(Contribution contribution) throws SaveFileException {
        this.gamesList = new ArrayList<>();
        this.contribution = contribution;
        this.moves = new StringBuilder();

        SaveFiles.checkFile(gamesSave);
    }

    public GamesSave() throws SaveFileException {
        this(null);
    }

    void initGameSave() throws SaveFileException {
        gameNumber = 0;
        try (Scanner scanner = new Scanner(gamesSave)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();

                if (line.contains("game") && line.contains("board")) {
                    gameNumber = this.getGameNumber(line);
                    gameNumber++;
                    addGameLine(line, scanner.nextLine(), scanner.nextLine());
                }
            }

            String newGame = String.format("game:%d;dateStamp:%s;player1:%s;AS:%s;player2:%s;AS:%s;board:%dx%d%n"
                    , gameNumber
                    , LocalDateTime.now()
                    , this.contribution.getName(1)
                    , this.contribution.getSort(1)
                    , this.contribution.getName(2)
                    , this.contribution.getSort(2)
                    , Board.getSize()
                    , Board.getSize());

            this.addGameLine(newGame);

        } catch (IOException e) {
            throw new SaveFileException("File could not be written: " + gamesSave.getFileName());
        }
    }

    private int getGameNumber(String line) {
        return Integer.parseInt(line.split(";")[0].split(":")[1]);
    }

    private void addGameLine(String heading, String moves, String winner) {
        this.gamesList.add(new String[]{heading, moves, winner});
    }

    private void addGameLine(String heading) {
        this.addGameLine(heading, null, null);
    }
}
